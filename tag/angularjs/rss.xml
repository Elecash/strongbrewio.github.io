<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.strongbrew.io</title>
   
   <link></link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>The $onChanges lifecycle-hook in depth</title>
	  <link>//the-onchanges-lifecycle-hook</link>
	  <author></author>
	  <pubDate>2016-04-06T00:00:00+00:00</pubDate>
	  <guid>//the-onchanges-lifecycle-hook</guid>
	  <description><![CDATA[
	     <p>With the release of Angular 1.5.3 we got some awesome new features. As you all know, the point of the Angular 1.5 releases are to bring us closer to the Angular 2 way of working. With that in mind, the latest new feature we’ve got are Lifecycle hooks. What those are and how you can use them has already been perfectly explained by Pascal Precht on <a href="http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html">his blog</a>. For the remainder of this blog, I’m going to assume you have read it.
I’m not going to try and do the same, instead I want to look at a specific lifecycle hook in depth, <code class="highlighter-rouge">$onChanges</code>. We’ll look at how it is implemented by Angular, how we can use it with some examples, a pitfall when using it with non-primitives and how we can fix it.</p>

<h4 id="how-is-it-implemented-in-the-angular-codebase">How is it implemented in the Angular codebase</h4>
<p>The <code class="highlighter-rouge">$onChanges</code> lifecycle hook can be used with the <code class="highlighter-rouge">'&lt;'</code> and <code class="highlighter-rouge">'@'</code> bindings. So to get started, we must look at how Angular handles these bindings.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="s1">'&lt;'</span><span class="p">:</span>
     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">attrName</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">optional</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="nx">attrs</span><span class="p">[</span><span class="nx">attrName</span><span class="p">]</span> <span class="o">=</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span>
     <span class="p">}</span>
     <span class="k">if</span> <span class="p">(</span><span class="nx">optional</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">attrName</span><span class="p">])</span> <span class="k">break</span><span class="p">;</span>
     <span class="nx">parentGet</span> <span class="o">=</span> <span class="nx">$parse</span><span class="p">(</span><span class="nx">attrs</span><span class="p">[</span><span class="nx">attrName</span><span class="p">]);</span>
     <span class="nx">destination</span><span class="p">[</span><span class="nx">scopeName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">parentGet</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
     <span class="nx">removeWatch</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span>
          <span class="nx">parentGet</span><span class="p">,</span>
          <span class="kd">function</span> <span class="nx">parentValueWatchAction</span><span class="p">(</span><span class="nx">newParentValue</span><span class="p">)</span> <span class="p">{</span>
                   <span class="kd">var</span> <span class="nx">oldValue</span> <span class="o">=</span> <span class="nx">destination</span><span class="p">[</span><span class="nx">scopeName</span><span class="p">];</span>
                   <span class="nx">recordChanges</span><span class="p">(</span><span class="nx">scopeName</span><span class="p">,</span> <span class="nx">newParentValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">);</span>
                   <span class="nx">destination</span><span class="p">[</span><span class="nx">scopeName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newParentValue</span><span class="p">;</span>
          <span class="p">},</span>
          <span class="nx">parentGet</span><span class="p">.</span><span class="nx">literal</span><span class="p">);</span>
     <span class="nx">removeWatchCollection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">removeWatch</span><span class="p">);</span>
     <span class="k">break</span><span class="p">;</span>

</code></pre></div></div>
<p><strong>Note: We’ll only look at the <code class="highlighter-rouge">'&lt;'</code>binding since the concepts are the same.</strong></p>

<p>This is the entire code block that is executed when a one-way binding is found. The part that really interests us here, is the <code class="highlighter-rouge">scope.$watch</code> expression and how it is setup.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span>
     <span class="nx">parentGet</span><span class="p">,</span>
     <span class="kd">function</span> <span class="nx">parentValueWatchAction</span><span class="p">(</span><span class="nx">newParentValue</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">oldValue</span> <span class="o">=</span> <span class="nx">destination</span><span class="p">[</span><span class="nx">scopeName</span><span class="p">];</span>
              <span class="nx">recordChanges</span><span class="p">(</span><span class="nx">scopeName</span><span class="p">,</span> <span class="nx">newParentValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">);</span>
              <span class="nx">destination</span><span class="p">[</span><span class="nx">scopeName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newParentValue</span><span class="p">;</span>
            <span class="p">},</span>
     <span class="nx">parentGet</span><span class="p">.</span><span class="nx">literal</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Let’s look at the listener function in particular, which is named <code class="highlighter-rouge">parentValueWatchAction</code> here. The listener function is the one that gets executed when the <code class="highlighter-rouge">$watch</code> expression is found dirty (if you do not understand what this means, I suggest you take a look at the <a href="https://www.ng-book.com/p/The-Digest-Loop-and-apply/">$digest cycle</a> which is a very important concept in Angular 1).
We can see that, if a <code class="highlighter-rouge">$watch</code> expression is dirty and the listener function is fired, a method called <code class="highlighter-rouge">recordChanges(scopeName, newParentValue, oldValue);</code> is executed. Hmmm thats seems interesting, lets dig deeper.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">recordChanges</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">,</span> <span class="nx">previousValue</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">destination</span><span class="p">.</span><span class="nx">$onChanges</span><span class="p">)</span>
             <span class="o">&amp;&amp;</span>
            <span class="nx">currentValue</span> <span class="o">!==</span> <span class="nx">previousValue</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// If we have not already scheduled the top</span>
          <span class="c1">// level onChangesQueue handler then do so now</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">onChangesQueue</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">scope</span><span class="p">.</span><span class="nx">$$postDigest</span><span class="p">(</span><span class="nx">flushOnChangesQueue</span><span class="p">);</span>
            <span class="nx">onChangesQueue</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="p">}</span>
          <span class="c1">// If we have not already queued a trigger</span>
          <span class="c1">// of onChanges for this controller then do so now</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">changes</span> <span class="o">=</span> <span class="p">{};</span>
            <span class="nx">onChangesQueue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">triggerOnChangesHook</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="c1">// If the has been a change on this property</span>
          <span class="c1">// already then we need to reuse the previous value</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">changes</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">previousValue</span> <span class="o">=</span> <span class="nx">changes</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">previousValue</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="c1">// Store this change</span>
          <span class="nx">changes</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
               <span class="na">previousValue</span><span class="p">:</span> <span class="nx">previousValue</span><span class="p">,</span>
               <span class="na">currentValue</span><span class="p">:</span> <span class="nx">currentValue</span>
          <span class="p">};</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">triggerOnChangesHook</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">destination</span><span class="p">.</span><span class="nx">$onChanges</span><span class="p">(</span><span class="nx">changes</span><span class="p">);</span>
        <span class="c1">// Now clear the changes so that we schedule</span>
        <span class="c1">// onChanges when more changes arrive</span>
        <span class="nx">changes</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This function, which is executed every time a dirty watch expression is found, does a number of things.
What it basically does is: Check if your controller, called <code class="highlighter-rouge">destination</code> here, has an <code class="highlighter-rouge">$onChanges</code> method defined. If this is the case, it creates an object called <code class="highlighter-rouge">changes</code> with the previous value and the current value and pushes the <code class="highlighter-rouge">$onChanges</code> method with the <code class="highlighter-rouge">changes</code> object onto a queue.
It also registers a function called <code class="highlighter-rouge">flushOnChangesQueue</code> to be executed during the <code class="highlighter-rouge">$$postDigest</code> phase. Let’s look at what this function does.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This function is called in a $$postDigest to trigger</span>
<span class="c1">// all the onChanges hooks in a single digest</span>
<span class="kd">function</span> <span class="nx">flushOnChangesQueue</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">--</span><span class="nx">onChangesTtl</span><span class="p">))</span> <span class="p">{</span>
          <span class="c1">// We have hit the TTL limit so reset everything</span>
          <span class="nx">onChangesQueue</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
          <span class="k">throw</span> <span class="nx">$compileMinErr</span><span class="p">(</span>
                <span class="s1">'infchng'</span><span class="p">,</span>
                <span class="s1">'{0} $onChanges() iterations reached.Aborting!</span><span class="err">\</span><span class="s1">n'</span><span class="p">,</span>
                <span class="nx">TTL</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// We must run this hook in an apply since</span>
        <span class="c1">// the $$postDigest runs outside apply</span>
        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ii</span> <span class="o">=</span> <span class="nx">onChangesQueue</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ii</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">onChangesQueue</span><span class="p">[</span><span class="nx">i</span><span class="p">]();</span>
          <span class="p">}</span>
          <span class="c1">// Reset the queue to trigger a new schedule</span>
          <span class="c1">// next time there is a change</span>
          <span class="nx">onChangesQueue</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">});</span>
      <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
        <span class="nx">onChangesTtl</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This function just loops over all the callbacks that were pushed on the queue earlier, and executes them. So every controller with the <code class="highlighter-rouge">$onChanges</code> callback defined, that has a bound value that was changed, is notified.</p>

<p>That’s basically it! What’s important to remember is:</p>

<ul>
  <li>
    <p>for the lifecycle hook to work, a <code class="highlighter-rouge">scope.$watch</code> expression must be dirty</p>
  </li>
  <li>
    <p>the lifecycle hooks that have values changed, are triggered after every digest cycle</p>
  </li>
  <li>
    <p>an object containing the old and the new value can be passed to the <code class="highlighter-rouge">$onChanges</code> callback</p>
  </li>
</ul>

<h4 id="time-for-some-examples">Time for some examples!</h4>

<h6 id="primitives">Primitives</h6>

<p>We’re going to start of with an easy example. I’ve create a <a href="http://plnkr.co/edit/ZB6CLEXuRMrEnTIjUpo7?p=preview">plnkr</a> that contains two components. A  component called ‘outer’ that contains another component called ‘inner’. Let’s look at the ‘outer’ component first.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">OuterComponent</span><span class="p">{</span>
  <span class="kr">public</span> <span class="nx">template</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span><span class="s2">`
    &lt;div&gt;
      Value: {{$ctrl.primitiveValue}} &lt;br /&gt;
      &lt;input ng-model="$ctrl.primitiveValue"&gt; &lt;br /&gt; &lt;br /&gt;

      &lt;inner primitive-value="$ctrl.primitiveValue"&gt;&lt;/inner&gt;
    &lt;/div&gt;
  `</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Note: all the examples are written using Typescript.</strong></p>

<p>It’s about as easy as it gets. If we look at it’s template, we can see it has a property called <code class="highlighter-rouge">primitiveValue</code> that you can change via an input box. It also defines our ‘inner’ component and binds the <code class="highlighter-rouge">primitiveValue</code>.</p>

<p>Let’s look at the ‘inner’ component.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">InnerComponent</span> <span class="p">{</span>
  <span class="kr">public</span> <span class="nx">controller</span><span class="p">:</span> <span class="nb">Function</span> <span class="o">=</span> <span class="nx">InnerController</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">bindings</span><span class="p">:</span> <span class="nx">any</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">primitiveValue</span> <span class="p">:</span> <span class="s2">"&lt;"</span>
  <span class="p">};</span>
  <span class="kr">public</span> <span class="nx">template</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span><span class="s2">`
    &lt;div&gt;
      PrimitiveValue: {{$ctrl.primitiveValue}} &lt;br /&gt;
      Number of times the $onChanges is invoked: {{$ctrl.onChangesCalledCounter}}
    &lt;/div&gt;
  `</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We can see the one-way binding that accepts the <code class="highlighter-rouge">primitiveValue</code>. In the template, this is printed using <code class="highlighter-rouge">{{$ctrl.primitiveValue}}</code>.</p>

<p>Let’s take a look at our ‘inner’ component’s controller.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">InnerController</span> <span class="p">{</span>
  <span class="kr">private</span> <span class="nx">onChangesCalledCounter</span><span class="p">:</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kr">public</span> <span class="nx">$onChanges</span><span class="p">(</span><span class="nx">changes</span><span class="p">:</span> <span class="nx">any</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">onChangesCalledCounter</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">changes</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Notice the <code class="highlighter-rouge">$onChanges</code> definition in the controller. Every time it is executed, the <code class="highlighter-rouge">onChangesCalledCounter</code>, that is printed in the template as well, is incremented, and the changed object is logged to the console.</p>

<p>The whole thing is wired together as follows.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">"app"</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s2">"outer"</span><span class="p">,</span><span class="k">new</span> <span class="nx">OuterComponent</span><span class="p">())</span>
  <span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s2">"inner"</span><span class="p">,</span> <span class="k">new</span> <span class="nx">InnerComponent</span><span class="p">());</span>
</code></pre></div></div>
<p>Note that this uses the new <code class="highlighter-rouge">.component</code> method introduced in Angular 1.5. This is a kind of directive that always has an isolate scope and has it’s <code class="highlighter-rouge">controllerAs</code> syntax set to <code class="highlighter-rouge">$ctrl</code> by default. Todd Motto has written an excellent <a href="https://toddmotto.com/exploring-the-angular-1-5-component-method/">blog post</a> on the subject.</p>

<p>Let’s try input some text in the input box and see what it does:</p>
<iframe style="width: 100%; height: 250px" src="https://embed.plnkr.co/ZB6CLEXuRMrEnTIjUpo7/" frameborder="0" allowfullscren="allowfullscren"></iframe>

<p>As you might have expected, on every key input in the input box, the <code class="highlighter-rouge">$onChanges</code> function is invoked.
With what we’ve learned, this is quite logical. A key input means the <code class="highlighter-rouge">primitiveValue</code> in the outer component has changed and a digest cycle is started. This will see that the <code class="highlighter-rouge">$watch</code> expression that is setup for the <code class="highlighter-rouge">'&lt;'</code> binding is dirty and register the <code class="highlighter-rouge">$onChanges</code> callback to be notified during the <code class="highlighter-rouge">$$postDigest</code> phase.
Neat right!</p>

<h6 id="non-primitive-values">Non primitive values</h6>
<p>Let’s kick it up a notch! Next is an example where we bind an array from the ‘outer’ to the ‘inner’ component. This is the <a href="http://plnkr.co/edit/iUy6m9s49m6nXLEqIK1P?p=preview">plnkr</a>.
Let’s look at the ‘outer’ component’s controller.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">OuterController</span> <span class="p">{</span>
  <span class="kr">private</span> <span class="nx">arrayValue</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="kr">private</span> <span class="nx">fruits</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"grape"</span><span class="p">];</span>
  <span class="kr">private</span> <span class="nx">vegetables</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"brocolli"</span><span class="p">,</span> <span class="s2">"aubergine"</span><span class="p">,</span> <span class="s2">"avocado"</span><span class="p">];</span>

  <span class="kr">public</span> <span class="nx">$onInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">arrayValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// In a real case scenario, this could be a network call that refreshes with new data</span>
  <span class="kr">public</span> <span class="nx">switchArrayValue</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">arrayValue</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span><span class="p">){</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">arrayValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vegetables</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">arrayValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A controller is introduced that initialises an array called <code class="highlighter-rouge">arrayValue</code> to the fruits array. It also contains a <code class="highlighter-rouge">switchArrayValue</code> function that simply switches the reference from the <code class="highlighter-rouge">arrayValue</code> between the fruits and vegetables.
In our template, we’ve bounded the array to the ‘inner’ component and added a button to call the <code class="highlighter-rouge">switchArrayValue</code> function.</p>

<p>The ‘inner’ component only changed in accepting an array instead of a primitive value.</p>

<p>Let’s try to click the button and see what it does:</p>
<iframe style="width: 100%; height: 250px" src="https://embed.plnkr.co/iUy6m9s49m6nXLEqIK1P/" frameborder="0" allowfullscren="allowfullscren"></iframe>

<p>As you would’ve expected, it does exactly the same thing as the previous example for the same reasons.</p>

<h6 id="non-primitive-values-pitfall">Non primitive values pitfall!</h6>

<p>Next, let’s try to add an element to the array in the ‘outer’ component and see what happens.
To do this, we must update the ‘outer’ component.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">OuterController</span> <span class="p">{</span>
  <span class="kr">private</span> <span class="nx">fruits</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">];</span>

  <span class="kr">public</span> <span class="nx">addElement</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"grape"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We updated the controller to work with a fruit array and provide a method that adds an element to the array. In the template we just call this function when the button is clicked and bind the fruits array into our ‘inner’ component.</p>

<p>What do you think will happen next? You’ve figured it out? Let’s give it a go!</p>

<iframe style="width: 100%; height: 250px" src="https://embed.plnkr.co/Godmmy48YR5jv8O5fInI/" frameborder="0" allowfullscren="allowfullscren"></iframe>

<p>Hmm, we see that the array in our ‘outer’ and our ‘inner’ component is updated. BUT our <code class="highlighter-rouge">$onChanges</code> callback is not fired. At first this might seem strange, but actually, it isn’t.
To explain why, we must look at the definition of the <code class="highlighter-rouge">$watch</code> function in Angular.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$watch</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span>
    <span class="nx">watchExp</span><span class="p">,</span> <span class="nx">listener</span><span class="p">,</span> <span class="nx">objectEquality</span><span class="p">,</span> <span class="nx">prettyPrintExpression</span>
    <span class="p">)</span>
</code></pre></div></div>
<p>Take a look at the third argument: <strong>objectEquality</strong>. This tells Angular whether to check the watch expression via reference or object equality. We looked at the way the watch expression is setup in the <code class="highlighter-rouge">recordChanges()</code> method above. No parameter is passed as third argument which means it defaults to comparison by reference.
In our test case above, we did not change the reference of the array but only added an element. This means our <code class="highlighter-rouge">$watch</code> expression will never be dirty! In that case the <code class="highlighter-rouge">$onChanges</code> callback is never triggered.
By now, you might wonder, then how the hell did our ‘inner’ component’s array change. That’s the thing. The ‘outer’ and ‘inner’ component share the same javascript reference to the fruits array. So even if you would push an element onto the array in the ‘inner’ component, it would also update the ‘outer’ component. Put’s a whole new light onto ‘one-way binding’ doesn’t it :).</p>

<h6 id="immutable-data-structures-to-the-rescue">Immutable data structures to the rescue!</h6>
<p>You might wonder if the Angular team made an error of judgement when implementing it this way. In fact, they didn’t. It was a deliberate choice to work with a reference-based comparison scheme. If you’d perform a deep compare on every object, your application’s performance would be extremely poor.
So what can we do to get the expected behaviour for our <code class="highlighter-rouge">$onChanges</code> method. If we were to change the reference of our array every time we change something to the array, we would be getting exactly that. What we actually need are immutable data structures.
For the following example <a href="http://plnkr.co/edit/ANZnoxxe2K2pztlrPRfu?p=preview">plnkr</a>, I’ve chosen <a href="https://facebook.github.io/immutable-js/">ImmutableJS</a> to demonstrate that we can get the expected behaviour with immutable data structures.</p>

<p>I’ve made a few small changes to the way the fruits array is created and updated:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">OuterController</span> <span class="p">{</span>
  <span class="kr">private</span> <span class="nx">fruits</span><span class="p">:</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">Immutable</span><span class="p">.</span><span class="nx">List</span><span class="p">.</span><span class="k">of</span><span class="p">(</span><span class="s2">"apple"</span> <span class="s2">"banana"</span><span class="p">);</span>

  <span class="kr">public</span> <span class="nx">addElement</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fruits</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">"grape"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>First of all, we initialise our list using ImmutableJS. The push method that is available on the returned object, of type <code class="highlighter-rouge">List</code>, doesn’t add an element to the existing datatype. Instead it returns a new instance of the List type with the element added. This way, we change our reference <strong>and</strong> add an element.</p>

<p>Let’s test again to see if it works as expected.</p>
<iframe style="width: 100%; height: 250px" src="https://embed.plnkr.co/ANZnoxxe2K2pztlrPRfu/" frameborder="0" allowfullscren="allowfullscren"></iframe>

<p>And it does!</p>

<h4 id="conclusion">Conclusion</h4>

<p>The lifecycle hook provides us with some great functionality. But be cautious. It’s only triggered if we use <strong>primitives</strong> or <strong>change the reference of the javascript object bound into the component</strong>. That’s why I would recommend to always use immutable data structures throughout your bindings.</p>


	  ]]></description>
	</item>


</channel>
</rss>
